{"version":3,"file":"static/js/471.97135a40.chunk.js","mappings":"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","sources":["components/Register/Register.tsx"],"sourcesContent":["import { Helmet } from \"react-helmet\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport { useFormik } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../../Redux/Store\";\r\nimport { register } from \"../../Redux/RegisterSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Oval } from \"react-loader-spinner\";\r\nimport toast from \"react-hot-toast\";\r\nimport * as yup from \"yup\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\n\r\nimport registerImg from \"../../assets/signup.jpg\";\r\nimport { unwrapResult } from \"@reduxjs/toolkit\";\r\n\r\nconst Register: React.FunctionComponent<{}> = () => {\r\n  let navigate = useNavigate();\r\n\r\n  let { loading } = useSelector((state: RootState) => state.Register);\r\n\r\n  useSelector((state: RootState) => state.Register);\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  interface RegisterFormValue {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    age: string;\r\n    phone: string;\r\n  }\r\n\r\n  const onSubmit = async (values: RegisterFormValue) => {\r\n    await dispatch(register(values))\r\n      .then(unwrapResult)\r\n      .then(() => {\r\n        toast.success(\"Your account created successfully!\");\r\n        setTimeout(() => navigate(\"/login\"), 3000);\r\n      })\r\n      .catch((result) => {\r\n        toast.error(result);\r\n      });\r\n  };\r\n\r\n  const validationSchema = yup.object({\r\n    name: yup\r\n      .string()\r\n      .required(\"Name is required\")\r\n      .min(3, \"Minimum length is 5 characters\")\r\n      .max(10, \"Max length is 10 characters\")\r\n      .matches(/^[a-zA-Z]+$/, \"Your name should only contain characters\"),\r\n    email: yup\r\n      .string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email is not valid\")\r\n      .matches(\r\n        /([a-z0-9][-a-z0-9_+.]*[a-z0-9])@([a-z0-9][-a-z0-9.]*[a-z0-9]\\.(arpa|root|aero|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)|([0-9]{1,3}\\.{3}[0-9]{1,3}))/,\r\n        \"your email must be a valid and real email\"\r\n      ),\r\n    password: yup\r\n      .string()\r\n      .required(\"Password is required\")\r\n      .matches(\r\n        /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})/,\r\n        \"Your password must contain a special character, a number,and a capital character\"\r\n      ),\r\n    age: yup.number().required().positive().integer(),\r\n    phone: yup\r\n      .string()\r\n      .required(\"Phone number is required\")\r\n      .matches(\r\n        /^01[0-2,5]\\d{8}$/,\r\n        \"Your phone must start with 010 / 011 / 012 / 015 and must be 11 numbers\"\r\n      ),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      age: \"\",\r\n      phone: \"\",\r\n    },\r\n    validationSchema,\r\n    onSubmit,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Register</title>\r\n      </Helmet>\r\n      <section>\r\n        <div className=\"container max-w-screen-xl px-4\">\r\n          <div className=\"columns-2 md:columns-1 bg-white flex justify-center items-center rounded-lg px-12 py-8 md:py-8\">\r\n            <div className=\"w-6/12 hidden md:block\">\r\n              <LazyLoadImage\r\n                src={registerImg}\r\n                alt=\"registerImg\"\r\n                width={576}\r\n                height={576}\r\n                placeholderSrc={registerImg}\r\n                effect=\"blur\"\r\n                className=\"w-100\"\r\n              />\r\n            </div>\r\n            <div className=\"w-full md:w-6/12 flex items-center justify-center flex-col\">\r\n              <h1>Sign Up</h1>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <div className=\"w-full mb-5 flex \">\r\n                  <i className=\"fa-solid fa-signature\"></i>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\"Name\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.name}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                </div>\r\n                {formik.errors.name && formik.touched.name ? (\r\n                  <p className=\"mb-5 pointer-events-none bg-red-300 text-white mt-0 rounded-full p-4 w-full block center\">\r\n                    {formik.errors.name}\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <div className=\"w-full mb-5 flex \">\r\n                  <i className=\"fa-solid fa-envelope\"></i>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\"Email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                </div>\r\n                {formik.errors.email && formik.touched.email ? (\r\n                  <p className=\"mb-5 pointer-events-none bg-red-300 text-white mt-0 rounded-full p-4 w-full block center\">\r\n                    {formik.errors.email}\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <div className=\"w-full mb-5 flex\">\r\n                  <i className=\"fa-solid fa-lock\"></i>\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                </div>\r\n                {formik.errors.password && formik.touched.password ? (\r\n                  <p className=\"mb-5 pointer-events-none bg-red-300 text-white mt-0 rounded-full p-4 w-full block center\">\r\n                    {formik.errors.password}\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <div className=\"w-full mb-5 flex\">\r\n                  <i className=\"fa-solid fa-arrow-up-9-1\"></i>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"age\"\r\n                    id=\"age\"\r\n                    placeholder=\"Age\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.age}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                </div>\r\n                {formik.errors.age && formik.touched.age ? (\r\n                  <p className=\"mb-5 pointer-events-none bg-red-300 text-white mt-0 rounded-full p-4 w-full block center\">\r\n                    {formik.errors.age}\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <div className=\"w-full mb-5 flex\">\r\n                  <i className=\"fa-solid fa-phone\"></i>\r\n                  <input\r\n                    type=\"tele\"\r\n                    name=\"phone\"\r\n                    id=\"phone\"\r\n                    placeholder=\"Phone\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.phone}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                </div>\r\n                {formik.errors.phone && formik.touched.phone ? (\r\n                  <p className=\"mb-5 pointer-events-none bg-red-300 text-white mt-0 rounded-full p-4 w-full block center\">\r\n                    {formik.errors.phone}\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-background-color flex justify-center items-center\"\r\n                >\r\n                  {loading ? (\r\n                    <Oval\r\n                      height={20}\r\n                      width={20}\r\n                      color=\"rgb(230 230 230)\"\r\n                      wrapperStyle={{}}\r\n                      wrapperClass=\"\"\r\n                      visible={true}\r\n                      ariaLabel=\"oval-loading\"\r\n                      secondaryColor=\"rgb(70 200 249)\"\r\n                      strokeWidth={2}\r\n                      strokeWidthSecondary={2}\r\n                    />\r\n                  ) : (\r\n                    \"Sign up\"\r\n                  )}\r\n                </button>\r\n              </form>\r\n              <p>\r\n                <Link to=\"/login\">You already have account ? Sign in</Link>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Register;\r\n"],"names":["navigate","useNavigate","loading","useSelector","state","Register","dispatch","useDispatch","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","register","then","unwrapResult","toast","success","setTimeout","catch","result","error","stop","_x","apply","arguments","validationSchema","yup","name","required","min","max","matches","email","password","age","positive","integer","phone","formik","useFormik","initialValues","_jsxs","_Fragment","children","Helmet","_jsx","charSet","className","LazyLoadImage","src","registerImg","alt","width","height","placeholderSrc","effect","handleSubmit","type","id","placeholder","onChange","handleChange","value","onBlur","handleBlur","errors","touched","Oval","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","Link","to"],"sourceRoot":""}